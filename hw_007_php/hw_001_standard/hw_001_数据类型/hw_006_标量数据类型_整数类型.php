<?php
/**
 * Created by PhpStorm.
 * User: lxgzhw
 * Date: 1/12/19
 * Time: 5:53 AM
 */

//整数类型 integer/int:存储的数据是个整数

//存储范围:64位系统中 最大数是 2的63次方-1(目测从0开始算的)
//存储范围:64位系统中 最小数是 负数 2的63次方(目测从0开始算的)
function show()
{
    echo '<br>';
}

//php中用pow方法计算次幂
echo pow(2, 63) - 1;
//9.2233720368548E+18
show();
echo -pow(2, 63);
//-9.2233720368548E+18

//被存储成了常量
show();
echo PHP_INT_MAX;
//9223372036854775807
show();

//-9223372036854775808
echo PHP_INT_MIN;

//最大值最小值的来源: 二进制决定的
/**
 * 计算机语言中,计算机的底层是机械语言的形式,就是一对0101...
 * 所谓的64位系统,指的是计算机存储的数据最多可以由多少位01组成
 *
 * 例如:11111111111111111111111111111....最多64位
 *
 * 二进制无论多长,如果是负数,第一位是需要用来表示符号的
 * 所以,64位数,实际上是63位数,最小值就是-2**63
 *
 * 如果存储的数据超过最大值或小于最小值
 *
 *
 */
show();
//超过最大值1000
$a = PHP_INT_MAX + 1000;
echo $a;//9.2233720368548E+18
//居然没有报错,变成了科学计数法
show();
$b = PHP_INT_MAX * PHP_INT_MAX;
echo $b;//8.5070591730235E+37
show();
//变成了浮点数 这种现象叫做整数存储数据溢出
var_dump($b);//float(8.5070591730235E+37)

show();
//其他进制的整数存储方式 计算机常用存储方式:2/8/10/16进制

/**
 * bindec()：二进制转十进制
 * decbin()：十进制转二进制，一样用
 *
 * dechex() ：十进制转16进制
 * hexdec()：16进制转10进制（参数直接写值，不用写0x）
 *
 * octdec()：八进制转10进制
 * decoct()：10进制转8进制
 */
//10进制数
$num = 1000;
//转2进制 0b开头
echo bindec($num);
show();
//转8进制 0开头
echo decoct($num);
show();
//转16进制 0x开头
echo dechex($num);
show();

//其他进制转10进制
//2进制
$num = 0b1000;
echo bindec($num);
show();

//8进制
$num = 01000;
echo octdec($num);
show();
//16进制
$num = 0x1000;
echo hexdec($num);
show();