<?php

// 字符串相关函数
// 
// 获取字符串的长度
// 英文，数字，符号，占1个长度
// 中文根据不同编码格式占不同长度
// UTF-8，一般占3个字符长度


// strlen(string);
// 
// 

// 非常重要，经常用到，多种操作相互结合，一定要门儿清
// 
// 获取原字符串的字串
// 
// 第一个参数是原创
// 
// 第二个参数是，指定截取位置的参数
// 
// 第三个参数是，指定截取长度的参数
// 
// 

// $a = "abcdefg";

// substr(string, start , 1);
// 



// 查询字符出现的位置
// 不管是首次还是最后一次，返回值，都是一个  数字
// 

// 首次出现的位置
//第一个参数是原串，第二个参数是需要查询的内容，第三个参数是查询起始的定位，第三个参数不能是负数 
//
//此查询方式区分大小写，如果查询失败，返回false

// $a = "abcdefgabcdefgabcdefg";

// echo strpos($a , "a");


// 与strpos(),用法相同，唯一区别是，是否区分查询内容的大小写
// 
// echo stripos($a, "A");



// 最后一次出现的位置
// 
//第一个参数是原串，第二个参数是需要查询的内容，第三个参数是查询从结尾处开始的偏移量，正数是从头开始偏移，负数是从结尾处开始偏移
// 
// 
// 
// $a = "abcdefgabcdefgabcdefg";


// echo  strrpos($a , "a" , -8);



// strripos()与strrpos()用法一致，只是区分不区分大小写
// 
//
// echo  strripos($a , "a" , -8);


// 小总结：查询位置，往往是判断字母或者字符是否是已经在字符串中
// 
// 


// 查询字符串出现的位置
// 返回值是一个字符串，类似于字符串截取子串的效果，但是操作没有substr灵活
// 

// 首次出现的位置
// 
// 
// strstr()第一个参数是原串，第二个参数是需要查询的内容，第三个参数默认是false，从查找的字符串位置开始(包括查找的字符串)，往右截取，直至原串末尾
// 
// 如果第三个参数是true，那么是从查找内容开始（不包括查找的内容）向左截取字符串，直至原串的起始位置
// 
// strstr()与strchr()互为别名函数
// 
// 
// $a = "abdcefg";
// echo strstr($a , "c" , false);


// stristr()与strstr()是一样的用法，只是不区分大小写


// 最后一次出现的位置
// strrchr
//只有两个参数，原串和需要查找的内容，截取方向为原串的结尾处
//

// $a = "abcd1abcd2abcd3";

// echo  strrchr($a , "a");
// 



// 总结：
// 	strpos 返回值是数字
// 		   用作判断是否存在于字符串中

//     strstr 返回值是字符串
//     	   效果类似于substr(),但是只有正向，反向截取，操作不灵活

//     substr 返回值是字符串
//     	   操作灵活，可以各种截取	
//     	   

// 截取，文件的扩展名

// 两种方法
// 
//1,最后一个 . 之后的内容，字母个数不确定 
//2,不能确定是大写还是小写
//3,一般截取之后，都转化为小写(strtolower)
//

$a = "123.456.789.HTML";


// 第一种方法的核心思想是：找到正确的substr的第二个参数


// 找到最后一个点的位置，再加1，作为substr的第二个参数，也就是截取位置的定位

// echo strtolower(substr($a , strrpos($a , ".")+1 ));




// 第二种方法的核心思想是：获取一个新的字符串作为substr的第一个参数

// 第二种方法，先获取一个带有.的新的字符串，将这个字符串作为substr的第一个参数，然后往后截取一位就可以了
// 
// 


echo strtolower(substr(strrchr($a , ".") , 1));