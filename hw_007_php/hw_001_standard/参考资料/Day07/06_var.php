<?php

// 函数中封装的数据，每次函数重新执行，之内的变量都会重新执行一次赋值运算，这样的局部变量称之为，动态局部变量，基本上所有的局部变量都是动态局部变量
// 
// 特殊声明过的变量，可以成为静态局部变量，函数重新执行，变量的数据累加变化。static语句声明时，需要有赋值。
// 
// 静态局部变量，一般用作计算函数执行次数，或者配合递归函数使用


// function abc(){
// 	$a = 0;
// 	$a++;
// 	return $a;
// }

// function def(){
// 	static $a = 0;
// 	$a++;
// 	return $a;
// }


// 递归函数：是一种函数的写法，在函数内部执行体中，调用自己这个函数
// 
// function abc(){
// 	执行体
// 	abc()
// }
// 
// $a = 5,从5开始，倒叙输出，5,4,3，2，1

$a = 5;

// for ($i = $a; $i > 0 ; $i--) { 
// 	echo $i;
// }
// 

// function abc($x){
// 	echo $x ;
// 	$x--;
// 	if($x > 0){
// 		abc($x);
// 	}
// }
// abc($a);

// 5, echo 5 5--4  if 4>0 递归，参数是4      
// 4, echo 4  4--3 if 3>0 递归，参数是3
// 3, echo 3  3--2 if 2>0 递归，参数是2
// 2, echo 2  2--1 if 1>0 递归，参数是1
// 1, echo 1  1--0 if 0>0 递归终止
								
// 求 1- 100 的和
// 

// function add($x,$y){
// 	static $a = 0;
// 	$a += $x;
// 	$x++;
// 	if ($x <= $y) {
// 		add($x,$y);
// 	}
// 	return $a;
// }

// echo add(1,10);

// 递归：递归函数，要注意最后一次的执行结果。如果最后一次执行结果没有返回值，需要注意是否需要添加一个返回值。如果不添加最后一次返回值是空，需要考虑返回值空会不会影响整个函数的结果

// 5*4*3*2*1

$a = 5;

function cheng($x){
	if ($x > 1) {
	    return	$x * cheng($x-1);
	}
	return $x ;
}

echo cheng(15);

// 5:  5>1  r 5 *

// 4:  4>1  r 5*4*

// 3:  3>1  r 5*4*3

// 2:  2>1  r 5*4*3*2

// 1:  1>1  false 4*4*3*2*  return $x (1)