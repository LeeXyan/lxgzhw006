<?php

// 累加求和函数
// 
// 10  100 
// 
// 如在PHP中直接编写执行程序，那么不利于程序的重复使用

// $a = 0;

// for ($i= 10; $i <= 100 ; $i++) { 
// 	$a += $i;
// }

// echo  $a ;

// 首先用过function来定义一个函数区间，之后一个空格，跟随的是函数的名称，函数名称之后的小括号内，写的是函数的参数，小括号之后的大括号中，写的是函数的执行体以及函数的返回值
// 
// 通过function我们是来封装(定义)一个函数。封装好的函数，需要通过函数名称来调用(使用)函数

// 函数的返回值，通过return语句实现，一个函数只能有且只有一个返回值，并且执行了return语句之后，函数运行会自动终止

// function add($a , $b ){
// 	$x = 0;
// 	for ($i= $a; $i  <= $b ; $i++) { 
// 		$x += $i;
// 	}

// 	return $x;
// }

// add(1 , 100);

// echo $x;


// 变量的作用域
// 
// 全局变量，局部变量，超全局变量

// 正常定义的变量，是全局变量
// 
//局部变量是在函数的执行体，或者函数的参数中定义的变量，佳作局部变量，只有在函数的执行过程中，存在的变量
//
//
//超全局变量，自然而然的，不需要特别声明或者定义的，就可以在函数之内之外，都可以使用的变量，预定义变量都是超全局变量
//
//
//其他计算机语言都存在全局变量污染，全局变量和局部变量命名重复，彼此的操作都会对对方造成影响

// 局部变量转化为全局变量
// 使用global语句，在函数内声明一个全局变量，只声明不赋值，声明之后再赋值
// 

// php的函数只能，是不能直接调用外部的全局变量的，需要通过与定义变量$GLOBALS来使用全局变量


$a = 100;
$c = 200;

// global语句：函数内部，声明一个全局变量，使用global语句，变量的声明和初始化， 需要分开进行
// 

// function aaa(){
// 	global $a;
// 	$a = 100;
// }

// echo $a;

// $GLOBALS,其实是一个预定义变量，其中以数组的形式存储了全局变量的变量名称和数据，我们可以在函数之内，通过$GLOBALS，以数组的形式，对其之内存储的数据进行赋值，还可以调用其中存储的数据


echo "<pre>";
print_r($GLOBALS);
echo "</pre>";

$a = 100;

function abc(){
	$a1 =100;
	$dfds = $a1*100;
	$a2 =200;
	$a3 =300;
	$a4 =400;
	$b = 500
	return $b;
}

echo abc();




